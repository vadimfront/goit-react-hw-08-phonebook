{"version":3,"file":"static/js/969.f4d74f6c.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","Pages/Login/Login.jsx","hooks/useStatusMessage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { TextField } from '@mui/material';\n\nconst InputText = styled(TextField)`\n  padding-top: 10px;\n  padding-bottm: 10px;\n  .MuiInput-underline::before {\n    border-color: #fff;\n  }\n  .MuiInput-root:hover:not(.Mui-disabled, .Mui-error):before {\n    border-color: #fff;\n  }\n  .MuiFormLabel-root,\n  .MuiInputBase-root {\n    color: #fff;\n  }\n`;\n\nconst ErrorMessage = styled.div({\n  marginTop: '10px',\n  color: 'red',\n});\n\nexport { InputText, ErrorMessage };\n","import React from 'react';\nimport * as Yup from 'yup';\nimport { Box, Button, Grid } from '@mui/material';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useLoginMutation } from 'reducer/authApi';\nimport { setCredentials } from 'reducer/authSlice';\nimport { ErrorMessage, InputText } from './LoginForm.styled';\nimport Spinner from 'components/Spinner/Spinner';\nimport useStatusMessage from 'hooks/useStatusMessage';\nimport { loginErrorMessage } from 'constants/constants';\nimport { useNavigate } from 'react-router-dom';\n\nconst LoginForm = () => {\n  const [login, { isLoading, isError, error }] = useLoginMutation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { toggleState, showErrorMessage } = useStatusMessage();\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .email('Enter a valid email address')\n      .required('Email field is required'),\n\n    password: Yup.string()\n      .min(8, 'Password must be at least 8 characters long')\n      .required('Password field is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n\n    onSubmit: async values => {\n      try {\n        const user = await login(values).unwrap();\n        dispatch(setCredentials(user));\n        navigate('/');\n      } catch (err) {\n        toggleState();\n      }\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <>\n      <Box\n        component=\"form\"\n        noValidate\n        onSubmit={formik.handleSubmit}\n        sx={{ pt: '25px', pb: '25px' }}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <InputText\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"off\"\n              onChange={formik.handleChange}\n              variant=\"standard\"\n              value={formik.values.email}\n            />\n            {formik.touched.email && formik.errors.email && (\n              <div>\n                <ErrorMessage>{formik.errors.email}</ErrorMessage>\n              </div>\n            )}\n          </Grid>\n          <Grid item xs={12}>\n            <InputText\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"off\"\n              onChange={formik.handleChange}\n              variant=\"standard\"\n              value={formik.values.password}\n            />\n            {formik.touched.password && formik.errors.password && (\n              <div>\n                <ErrorMessage>{formik.errors.password}</ErrorMessage>\n              </div>\n            )}\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          sx={{ mt: 3, mb: 2 }}\n        >\n          Sign Up\n        </Button>\n      </Box>\n      {isLoading && <Spinner />}\n      {isError && showErrorMessage(error.status, loginErrorMessage)}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import { Container, Grid } from '@mui/material';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport React from 'react';\n\nconst Login = () => {\n  return (\n    <Container>\n      <Grid container justifyContent=\"center\">\n        <Grid item xs={8}>\n          <LoginForm />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { Alert, Snackbar } from '@mui/material';\nimport { useState } from 'react';\n\nconst useStatusMessage = () => {\n  const [isSnackbarShown, setIsSnackbarShown] = useState(false);\n\n  const toggleState = () => {\n    setIsSnackbarShown(!isSnackbarShown);\n  };\n\n  const chooseErrorMessage = (code, errorMessage) => {\n    const res = errorMessage.filter(m => m.code === code);\n    return res;\n  };\n\n  const snackbarEl = (message, status) => {\n    return (\n      <Snackbar\n        open={isSnackbarShown}\n        autoHideDuration={1000}\n        onClose={toggleState}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <Alert variant=\"filled\" severity={status}>\n          {message}\n        </Alert>\n      </Snackbar>\n    );\n  };\n\n  const showErrorMessage = (code, message) => {\n    const chosenMessage = chooseErrorMessage(code, message);\n    return snackbarEl(chosenMessage[0].message, 'error');\n  };\n\n  const showSuccessfulMessage = message => {\n    return snackbarEl(message, 'success');\n  };\n\n  const showInfoMessage = message => {\n    return snackbarEl(message, 'info');\n  };\n\n  return {\n    toggleState,\n    showErrorMessage,\n    showSuccessfulMessage,\n    showInfoMessage,\n  };\n};\n\nexport default useStatusMessage;\n"],"names":["InputText","styled","TextField","ErrorMessage","marginTop","color","useLoginMutation","login","isLoading","isError","error","dispatch","useDispatch","navigate","useNavigate","useStatusMessage","toggleState","showErrorMessage","validationSchema","Yup","shape","email","required","password","min","formik","useFormik","initialValues","onSubmit","values","unwrap","user","setCredentials","resetForm","Box","component","noValidate","handleSubmit","sx","pt","pb","Grid","container","spacing","item","xs","fullWidth","id","label","name","autoComplete","onChange","handleChange","variant","value","touched","errors","type","Button","mt","mb","Spinner","status","loginErrorMessage","Container","justifyContent","useState","isSnackbarShown","setIsSnackbarShown","snackbarEl","message","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","code","chosenMessage","errorMessage","filter","m","chooseErrorMessage","showSuccessfulMessage","showInfoMessage"],"sourceRoot":""}