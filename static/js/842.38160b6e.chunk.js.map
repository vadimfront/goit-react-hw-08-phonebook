{"version":3,"file":"static/js/842.38160b6e.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegistrationForm.styled.jsx","components/RegistrationForm/RegistrationForm.jsx","Pages/Registration/Registration.jsx","hooks/useStatusMessage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { TextField } from '@mui/material';\n\nconst InputText = styled(TextField)`\n  padding-top: 10px;\n  padding-bottm: 10px;\n  .MuiInput-underline::before {\n    border-color: #fff;\n  }\n  .MuiInput-root:hover:not(.Mui-disabled, .Mui-error):before {\n    border-color: #fff;\n  }\n  .MuiFormLabel-root,\n  .MuiInputBase-root {\n    color: #fff;\n  }\n`;\n\nconst ErrorMessage = styled.div({\n  marginTop: '10px',\n  color: 'red',\n});\n\nexport { InputText, ErrorMessage };\n","import React from 'react';\nimport * as Yup from 'yup';\nimport { Box, Button, Grid } from '@mui/material';\nimport Spinner from 'components/Spinner/Spinner';\nimport { useFormik } from 'formik';\nimport { useSingnupMutation } from 'reducer/authApi';\nimport { setCredentials } from 'reducer/authSlice';\nimport { ErrorMessage, InputText } from './RegistrationForm.styled';\nimport { registrationErrorMessage } from 'constants/constants';\nimport useStatusMessage from 'hooks/useStatusMessage';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nexport const RegistrationForm = () => {\n  const [signup, { isLoading, isError, error }] = useSingnupMutation();\n  const { toggleState, showErrorMessage } = useStatusMessage();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n      .min(2, 'Name must be at least 2 characters long')\n      .required('Name is required'),\n\n    email: Yup.string()\n      .email('Enter a valid email address')\n      .required('Email is required'),\n\n    password: Yup.string()\n      .min(8, 'Password must be at least 8 characters long')\n      .required('Password is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: async values => {\n      try {\n        const user = await signup(values).unwrap();\n\n        dispatch(setCredentials(user));\n        navigate('/contacts');\n      } catch (err) {\n        toggleState();\n      }\n    },\n  });\n\n  return (\n    <>\n      <Box\n        component=\"form\"\n        noValidate\n        onSubmit={formik.handleSubmit}\n        sx={{ pt: '25px', pb: '25px' }}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <InputText\n              required\n              fullWidth\n              id=\"name\"\n              label=\"name\"\n              name=\"name\"\n              variant=\"standard\"\n              onChange={formik.handleChange}\n              value={formik.values.name}\n            />\n            {formik.touched.name && formik.errors.name && (\n              <ErrorMessage>{formik.errors.name}</ErrorMessage>\n            )}\n          </Grid>\n          <Grid item xs={12}>\n            <InputText\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              variant=\"standard\"\n              onChange={formik.handleChange}\n              value={formik.values.email}\n            />\n            {formik.touched.email && formik.errors.email && (\n              <ErrorMessage>{formik.errors.email}</ErrorMessage>\n            )}\n          </Grid>\n          <Grid item xs={12}>\n            <InputText\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              variant=\"standard\"\n              onChange={formik.handleChange}\n              value={formik.values.password}\n            />\n            {formik.touched.password && formik.errors.password && (\n              <ErrorMessage>{formik.errors.password}</ErrorMessage>\n            )}\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          sx={{ mt: 3, mb: 2 }}\n        >\n          Sign Up\n        </Button>\n      </Box>\n      {isLoading && <Spinner />}\n      {isError && showErrorMessage(error.status, registrationErrorMessage)}\n    </>\n  );\n};\n","import { Container, Grid } from '@mui/material';\nimport { RegistrationForm } from 'components/RegistrationForm/RegistrationForm';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { selectUser } from 'reducer/selectors';\n\nconst Registration = () => {\n  const user = useSelector(selectUser);\n\n  if (user) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <Container>\n      <Grid container justifyContent=\"center\">\n        <Grid item xs={8}>\n          <RegistrationForm />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Registration;\n","import React from 'react';\nimport { Alert, Snackbar } from '@mui/material';\nimport { useState } from 'react';\n\nconst useStatusMessage = () => {\n  const [isSnackbarShown, setIsSnackbarShown] = useState(false);\n\n  const toggleState = () => {\n    setIsSnackbarShown(!isSnackbarShown);\n  };\n\n  const chooseErrorMessage = (code, errorMessage) => {\n    const res = errorMessage.filter(m => m.code === code);\n    return res;\n  };\n\n  const snackbarEl = (message, status) => {\n    return (\n      <Snackbar\n        open={isSnackbarShown}\n        autoHideDuration={3000}\n        onClose={toggleState}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <Alert variant=\"filled\" severity={status}>\n          {message}\n        </Alert>\n      </Snackbar>\n    );\n  };\n\n  const showErrorMessage = (code, message) => {\n    const chosenMessage = chooseErrorMessage(code, message);\n    return snackbarEl(chosenMessage[0].message, 'error');\n  };\n\n  const showSuccessfulMessage = message => {\n    return snackbarEl(message, 'success');\n  };\n\n  const showInfoMessage = message => {\n    return snackbarEl(message, 'info');\n  };\n\n  return {\n    toggleState,\n    showErrorMessage,\n    showSuccessfulMessage,\n    showInfoMessage,\n  };\n};\n\nexport default useStatusMessage;\n"],"names":["InputText","styled","TextField","ErrorMessage","marginTop","color","RegistrationForm","useSingnupMutation","signup","isLoading","isError","error","useStatusMessage","toggleState","showErrorMessage","dispatch","useDispatch","navigate","useNavigate","validationSchema","Yup","shape","name","min","required","email","password","formik","useFormik","initialValues","onSubmit","values","unwrap","user","setCredentials","Box","component","noValidate","handleSubmit","sx","pt","pb","Grid","container","spacing","item","xs","fullWidth","id","label","variant","onChange","handleChange","value","touched","errors","type","Button","mt","mb","Spinner","status","registrationErrorMessage","useSelector","selectUser","to","Container","justifyContent","useState","isSnackbarShown","setIsSnackbarShown","snackbarEl","message","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","code","chosenMessage","errorMessage","filter","m","chooseErrorMessage","showSuccessfulMessage","showInfoMessage"],"sourceRoot":""}